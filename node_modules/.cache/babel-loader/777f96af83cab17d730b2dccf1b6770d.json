{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { asyncAll } from \"./Util\";\nimport { getTokenInfo } from \"./EosHttpApi\";\nimport ecc from \"eosjs-ecc\";\nvar AWS_API_URL = process.env.REACT_APP_AWS_API_URL; // Awsサーバーからデータを取ってくる処理をまとめたもの\n\nvar Aws =\n/*#__PURE__*/\nfunction () {\n  function Aws() {\n    _classCallCheck(this, Aws);\n  }\n\n  _createClass(Aws, null, [{\n    key: \"getCmntyList\",\n    // コミュニティデータを取得する\n    value: function () {\n      var _getCmntyList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, response, community;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = AWS_API_URL + \"/community\";\n                _context.next = 3;\n                return fetch(url, {\n                  method: \"GET\",\n                  mode: \"cors\"\n                });\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                community = _context.sent;\n                return _context.abrupt(\"return\", community);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getCmntyList() {\n        return _getCmntyList.apply(this, arguments);\n      };\n    }() // URLページのタイトルを取得する\n\n  }, {\n    key: \"title\",\n    value: function () {\n      var _title = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(pageUrl) {\n        var url, response, title;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = AWS_API_URL + \"/title?url=\".concat(pageUrl);\n                _context2.next = 3;\n                return fetch(url, {\n                  method: \"GET\",\n                  mode: \"cors\"\n                });\n\n              case 3:\n                response = _context2.sent;\n                _context2.next = 6;\n                return response.json();\n\n              case 6:\n                title = _context2.sent;\n                return _context2.abrupt(\"return\", title);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function title(_x) {\n        return _title.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"sendPermissionLink\",\n    value: function () {\n      var _sendPermissionLink = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(payload) {\n        var apiUrl, req, res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                apiUrl = \" https://78qy7hxmjd.execute-api.ap-northeast-1.amazonaws.com/proxyStage1/submitlink\";\n                req = {\n                  method: \"POST\",\n                  mode: \"cors\",\n                  cache: \"no-cache\",\n                  headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\"\n                  },\n                  body: JSON.stringify(payload)\n                };\n                _context3.next = 4;\n                return fetch(apiUrl, req);\n\n              case 4:\n                _context3.next = 6;\n                return _context3.sent.json();\n\n              case 6:\n                res = _context3.sent;\n                console.log(res);\n                alert(\"[紹介コードは次のとおりです。必ずコピーして保存して下さい]\");\n                alert(\"紹介コード:\" + res.body);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function sendPermissionLink(_x2) {\n        return _sendPermissionLink.apply(this, arguments);\n      };\n    }() // コミュニティのセキュリティチェック\n\n  }, {\n    key: \"getRedirectPermission\",\n    value: function () {\n      var _getRedirectPermission = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(payload) {\n        var apiUrl, req, res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                apiUrl = \"https://78qy7hxmjd.execute-api.ap-northeast-1.amazonaws.com/proxyStage1/proxysecurity\";\n                req = {\n                  method: \"POST\",\n                  mode: \"cors\",\n                  cache: \"no-cache\",\n                  headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\"\n                  },\n                  body: JSON.stringify(payload)\n                };\n                _context4.next = 4;\n                return fetch(apiUrl, req);\n\n              case 4:\n                _context4.next = 6;\n                return _context4.sent.json();\n\n              case 6:\n                res = _context4.sent;\n\n                if (res.redirect) {\n                  window.location.href = res.redirect;\n                }\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function getRedirectPermission(_x3) {\n        return _getRedirectPermission.apply(this, arguments);\n      };\n    }() // パスワードから生成したhashとsymbol,nftIdを使ってSaltを作る\n\n  }, {\n    key: \"genSalt\",\n    value: function () {\n      var _genSalt = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(password, symbol, nftId) {\n        var tail3, seedHash, apiUrl, apiObj, req, salt;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(password.length < 3)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw new Error(\"パスワードが短すぎます。\");\n\n              case 2:\n                tail3 = password.slice(-3); // 末尾3文字\n\n                seedHash = ecc.sha256(tail3);\n                apiUrl = \"https://85z0ywf1ol.execute-api.ap-northeast-1.amazonaws.com/secretHashing0\";\n                apiObj = {\n                  \"hash\": seedHash,\n                  \"symbol\": symbol,\n                  \"nftId\": nftId\n                };\n                req = {\n                  method: \"POST\",\n                  mode: \"cors\",\n                  cache: \"no-cache\",\n                  headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\"\n                  },\n                  body: JSON.stringify(apiObj)\n                };\n                _context5.next = 9;\n                return fetch(apiUrl, req);\n\n              case 9:\n                _context5.next = 11;\n                return _context5.sent.json();\n\n              case 11:\n                salt = _context5.sent;\n                return _context5.abrupt(\"return\", salt);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function genSalt(_x4, _x5, _x6) {\n        return _genSalt.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return Aws;\n}();\n\nexport { Aws as default };","map":{"version":3,"sources":["/var/www/html/pcs-proxy/src/scripts/Aws.js"],"names":["asyncAll","getTokenInfo","ecc","AWS_API_URL","process","env","REACT_APP_AWS_API_URL","Aws","url","fetch","method","mode","response","json","community","pageUrl","title","payload","apiUrl","req","cache","headers","body","JSON","stringify","res","console","log","alert","redirect","window","location","href","password","symbol","nftId","length","Error","tail3","slice","seedHash","sha256","apiObj","salt"],"mappings":"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","sourcesContent":["import { asyncAll } from \"./Util\";\nimport { getTokenInfo } from \"./EosHttpApi\";\nimport ecc from \"eosjs-ecc\"; \n\nconst AWS_API_URL = process.env.REACT_APP_AWS_API_URL;\n\n// Awsサーバーからデータを取ってくる処理をまとめたもの\nexport default class Aws {\n\n    // コミュニティデータを取得する\n    static async getCmntyList() {\n        const url = AWS_API_URL + \"/community\";\n        const response = await fetch(url, { method: \"GET\", mode: \"cors\" });\n        const community = await response.json();\n        return community;\n    }\n\n    // URLページのタイトルを取得する\n    static async title(pageUrl) {\n        const url = AWS_API_URL + `/title?url=${pageUrl}`;\n        const response = await fetch(url, { method: \"GET\", mode: \"cors\" });\n        const title = await response.json();\n        return title;\n    }\n\n    static async sendPermissionLink(payload) {\n        const apiUrl = \" https://78qy7hxmjd.execute-api.ap-northeast-1.amazonaws.com/proxyStage1/submitlink\";\n        const req = {\n            method: \"POST\",\n            mode: \"cors\",\n            cache: \"no-cache\",\n            headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n            body: JSON.stringify(payload)\n        };\n\n        const res = await (await fetch(apiUrl, req)).json();\n        console.log(res)\n        alert(\"[紹介コードは次のとおりです。必ずコピーして保存して下さい]\")\n        alert(\"紹介コード:\"+res.body)\n    }\n\n    // コミュニティのセキュリティチェック\n    static async getRedirectPermission(payload) {\n        const apiUrl = \"https://78qy7hxmjd.execute-api.ap-northeast-1.amazonaws.com/proxyStage1/proxysecurity\";\n\n        const req = {\n            method: \"POST\",\n            mode: \"cors\",\n            cache: \"no-cache\",\n            headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n            body: JSON.stringify(payload)\n        };\n\n        const res = await (await fetch(apiUrl, req)).json();\n        if(res.redirect){window.location.href=res.redirect;}\n    }\n\n\n    // パスワードから生成したhashとsymbol,nftIdを使ってSaltを作る\n    static async genSalt(password, symbol, nftId) {\n        if (password.length < 3) {\n            throw new Error(\"パスワードが短すぎます。\");\n        }\n        const tail3 = password.slice(-3); // 末尾3文字\n        const seedHash = ecc.sha256(tail3);\n\n        const apiUrl = \"https://85z0ywf1ol.execute-api.ap-northeast-1.amazonaws.com/secretHashing0\";\n        const apiObj = {\n            \"hash\": seedHash,\n            \"symbol\": symbol,\n            \"nftId\": nftId\n        };\n        const req = {\n            method: \"POST\",\n            mode: \"cors\",\n            cache: \"no-cache\",\n            headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n            body: JSON.stringify(apiObj)\n        };\n\n        const salt = await (await fetch(apiUrl, req)).json();\n        return salt;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}