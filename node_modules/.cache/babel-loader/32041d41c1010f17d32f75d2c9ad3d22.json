{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/createClass\";\n// EOSを使ったSubsig関連の処理をまとめたもの\nimport ecc from 'eosjs-ecc';\nimport Aws from \"./Aws\";\nimport { getTable } from \"./EosHttpApi\";\n\nvar EosSubSig =\n/*#__PURE__*/\nfunction () {\n  function EosSubSig(symbol) {\n    _classCallCheck(this, EosSubSig);\n\n    this.symbol = symbol;\n  } // パスワードとIDをもとに、公開鍵ペアを生成する\n\n\n  _createClass(EosSubSig, [{\n    key: \"genKeyPair\",\n    value: function () {\n      var _genKeyPair = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(nftId, passWord) {\n        var symbol, salt, privateKey, publicKey, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                symbol = this.symbol;\n                _context.next = 3;\n                return Aws.genSalt(passWord, symbol, Number(nftId));\n\n              case 3:\n                salt = _context.sent;\n                // サーバーを使ってソルトを生成\n                privateKey = ecc.seedPrivate(\"\".concat(passWord, \"+\").concat(salt)); // e.g. 5K2YUVmWfxbmvsNxCsfvArXdGXm7d5DC9pn4yD75k2UaSYgkXTh\n\n                publicKey = ecc.privateToPublic(privateKey); // e.g. EOS5cYvx6NBYNdcJUym9WydRRs6329UTzJgzKii8dESmw2ZaA4fEH\n\n                response = {\n                  \"privateKey\": privateKey,\n                  \"publicKey\": publicKey\n                };\n                return _context.abrupt(\"return\", response);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function genKeyPair(_x, _x2) {\n        return _genKeyPair.apply(this, arguments);\n      };\n    }() // ローカルストレージからSubsig秘密鍵を読み込む\n\n  }, {\n    key: \"getLocalAuth\",\n    value: function getLocalAuth() {\n      var subSig = JSON.parse(localStorage.getItem(this.symbol));\n\n      try {\n        var id = subSig.id;\n        var privateKey = subSig.privateKey;\n        return {\n          id: id,\n          privateKey: privateKey\n        };\n      } catch (_unused) {\n        throw new Error(\"ローカルのSubsigキーの読み込みに失敗しました。\");\n      }\n    } // 指定したトークンのPublicKeyとownerアカウントを取得する\n\n  }, {\n    key: \"getEOSAuth\",\n    value: function () {\n      var _getEOSAuth = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(nftId) {\n        var code, query, response, owner, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n                query = {\n                  \"code\": code,\n                  \"scope\": this.symbol,\n                  \"table\": \"token\",\n                  \"lower_bound\": nftId,\n                  \"limit\": 1\n                };\n                _context2.next = 4;\n                return getTable(query);\n\n              case 4:\n                response = _context2.sent;\n                // Web Apiを使ってTableの内容を取得\n                owner = response.rows[0].owner;\n                result = {\n                  \"account\": owner,\n                  \"subkey\": response.rows[0].subkey\n                }; // 必要な情報を抜き出す\n\n                return _context2.abrupt(\"return\", result);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getEOSAuth(_x3) {\n        return _getEOSAuth.apply(this, arguments);\n      };\n    }() // subkeyとsignatureを得る\n\n  }, {\n    key: \"getSigAndSubkey\",\n    value: function () {\n      var _getSigAndSubkey = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this$getLocalAuth, id, privateKey, signature, _ref, subkey;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _this$getLocalAuth = this.getLocalAuth(), id = _this$getLocalAuth.id, privateKey = _this$getLocalAuth.privateKey;\n                signature = EosSubSig.genSig(privateKey);\n                _context3.next = 5;\n                return this.getEOSAuth(id);\n\n              case 5:\n                _ref = _context3.sent;\n                subkey = _ref.subkey;\n                return _context3.abrupt(\"return\", {\n                  signature: signature,\n                  subkey: subkey\n                });\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n                return _context3.abrupt(\"return\", {\n                  signature: \"\",\n                  subkey: \"\"\n                });\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 10]]);\n      }));\n\n      return function getSigAndSubkey() {\n        return _getSigAndSubkey.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"verifyAuth\",\n    value: function () {\n      var _verifyAuth = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(tokenId, privateKey) {\n        var message, signature, verified;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // 署名用のメッセージを作成\n                message = EosSubSig.getSubSigMessage(); // デジタル署名\n\n                signature = ecc.sign(message, privateKey); // 署名検証を行う\n\n                _context4.next = 4;\n                return Aws.checkRyodanSecurity(this.symbol, tokenId, signature, message);\n\n              case 4:\n                verified = _context4.sent;\n                return _context4.abrupt(\"return\", verified[\"verify\"]);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function verifyAuth(_x4, _x5) {\n        return _verifyAuth.apply(this, arguments);\n      };\n    }() // コミュニティ運営権限を持つNFTのIDリストを取得し運営者であるかを返す\n\n  }, {\n    key: \"checkManager\",\n    value: function () {\n      var _checkManager = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(nftId) {\n        var code, query, community_table, isManager;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n                query = {\n                  \"code\": code,\n                  \"scope\": this.symbol,\n                  \"table\": \"manager\",\n                  \"lower_bound\": nftId,\n                  \"upper_bound\": nftId,\n                  \"limit\": 1\n                };\n                _context5.next = 4;\n                return getTable(query);\n\n              case 4:\n                community_table = _context5.sent;\n                isManager = community_table.rows.length === 1;\n                return _context5.abrupt(\"return\", isManager);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function checkManager(_x6) {\n        return _checkManager.apply(this, arguments);\n      };\n    }() // 署名を生成して返す関数\n\n  }, {\n    key: \"getSeller\",\n    // トークンの売り注文をしたアカウントを取得するための関数\n    value: function () {\n      var _getSeller = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(nftId) {\n        var code, query, result, response, realOwner;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n                query = {\n                  \"code\": code,\n                  \"scope\": this.symbol,\n                  \"table\": \"sellorder\",\n                  \"lower_bound\": nftId,\n                  \"upper_bound\": nftId,\n                  \"limit\": 1\n                };\n                _context6.next = 4;\n                return getTable(query);\n\n              case 4:\n                result = _context6.sent;\n                // Web Apiを使ってTableの内容を取得\n                response = result.rows;\n\n                if (!(response.length === 0)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", code);\n\n              case 8:\n                realOwner = response[0].user;\n                return _context6.abrupt(\"return\", realOwner);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function getSeller(_x7) {\n        return _getSeller.apply(this, arguments);\n      };\n    }()\n  }], [{\n    key: \"genSig\",\n    value: function genSig(privateKey) {\n      var message = EosSubSig.getSubSigMessage();\n      var signature = ecc.sign(message, privateKey);\n      return signature;\n    }\n  }, {\n    key: \"getSubSigMessage\",\n    value: function getSubSigMessage() {\n      var a_day = 24 * 60 * 60 * 1000;\n      var message = String(Math.floor(Number(new Date()) / a_day) * a_day);\n      return message;\n    }\n  }]);\n\n  return EosSubSig;\n}();\n\nexport { EosSubSig as default };","map":{"version":3,"sources":["/var/www/html/pcs-proxy/src/scripts/EosSubSig.js"],"names":["ecc","Aws","getTable","EosSubSig","symbol","nftId","passWord","genSalt","Number","salt","privateKey","seedPrivate","publicKey","privateToPublic","response","subSig","JSON","parse","localStorage","getItem","id","Error","code","process","env","REACT_APP_CONTRACT_ACCOUNT","query","owner","rows","result","subkey","getLocalAuth","signature","genSig","getEOSAuth","console","error","tokenId","message","getSubSigMessage","sign","checkRyodanSecurity","verified","community_table","isManager","length","realOwner","user","a_day","String","Math","floor","Date"],"mappings":"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","sourcesContent":["// EOSを使ったSubsig関連の処理をまとめたもの\nimport ecc from 'eosjs-ecc';\nimport Aws from \"./Aws\";\nimport { getTable } from \"./EosHttpApi\";\n\nexport default class EosSubSig {\n    constructor(symbol) {\n        this.symbol = symbol;\n    }\n\n    // パスワードとIDをもとに、公開鍵ペアを生成する\n    async genKeyPair(nftId, passWord) {\n        const symbol = this.symbol;\n        const salt = await Aws.genSalt(passWord, symbol, Number(nftId)); // サーバーを使ってソルトを生成\n        const privateKey = ecc.seedPrivate(`${passWord}+${salt}`); // e.g. 5K2YUVmWfxbmvsNxCsfvArXdGXm7d5DC9pn4yD75k2UaSYgkXTh\n        const publicKey = ecc.privateToPublic(privateKey); // e.g. EOS5cYvx6NBYNdcJUym9WydRRs6329UTzJgzKii8dESmw2ZaA4fEH\n        const response = {\n            \"privateKey\": privateKey,\n            \"publicKey\": publicKey\n        };\n        return response;\n    }\n\n    // ローカルストレージからSubsig秘密鍵を読み込む\n    getLocalAuth() {\n        let subSig = JSON.parse(localStorage.getItem(this.symbol));\n        try {\n            let id = subSig.id;\n            let privateKey = subSig.privateKey;\n            return {id, privateKey};\n        }\n        catch {\n            throw new Error(\"ローカルのSubsigキーの読み込みに失敗しました。\");\n        }\n    }\n\n    // 指定したトークンのPublicKeyとownerアカウントを取得する\n    async getEOSAuth(nftId) {\n        const code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n        const query = {\n            \"code\": code,\n            \"scope\": this.symbol,\n            \"table\": \"token\",\n            \"lower_bound\": nftId,\n            \"limit\": 1\n        };\n\n        let response = await getTable(query); // Web Apiを使ってTableの内容を取得\n        let owner = response.rows[0].owner;\n\n        let result = { \"account\": owner, \"subkey\": response.rows[0].subkey }; // 必要な情報を抜き出す\n        return result;\n    }\n\n    // subkeyとsignatureを得る\n    async getSigAndSubkey() {\n        try {\n            const { id, privateKey } = this.getLocalAuth();\n            const signature = EosSubSig.genSig(privateKey);\n            const { subkey } = await this.getEOSAuth(id);\n            return { signature, subkey };\n        } catch (error) {\n            console.error(error);\n            return {\n                signature : \"\",\n                subkey: \"\"\n            }\n        }\n    }\n\n    async verifyAuth(tokenId, privateKey) {\n        // 署名用のメッセージを作成\n        const message = EosSubSig.getSubSigMessage();\n        // デジタル署名\n        const signature = ecc.sign(message, privateKey);\n\n        // 署名検証を行う\n        const verified = await Aws.checkRyodanSecurity(this.symbol, tokenId, signature, message);\n        return verified[\"verify\"];\n    }\n\n    // コミュニティ運営権限を持つNFTのIDリストを取得し運営者であるかを返す\n    async checkManager(nftId) {\n        const code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n        const query = {\n            \"code\": code,\n            \"scope\": this.symbol,\n            \"table\": \"manager\",\n            \"lower_bound\": nftId,\n            \"upper_bound\": nftId,\n            \"limit\": 1\n        };\n        const community_table = await getTable(query);\n        const isManager = (community_table.rows.length === 1);\n        return isManager;\n    }\n\n    // 署名を生成して返す関数\n    static genSig(privateKey) {\n        const message = EosSubSig.getSubSigMessage();\n        const signature = ecc.sign(message, privateKey);\n        return signature;\n    }\n\n    // トークンの売り注文をしたアカウントを取得するための関数\n    async getSeller(nftId) {\n        const code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n        const query = {\n            \"code\": code,\n            \"scope\": this.symbol,\n            \"table\": \"sellorder\",\n            \"lower_bound\": nftId,\n            \"upper_bound\": nftId,\n            \"limit\": 1\n        };\n        let result = await getTable(query); // Web Apiを使ってTableの内容を取得\n        let response = result.rows;\n\n        if (response.length === 0) {\n            return code;\n        }\n\n        let realOwner = response[0].user;\n        return realOwner;\n    }\n\n    static getSubSigMessage() {\n        const a_day = 24 * 60 * 60 * 1000;\n        const message = String(Math.floor(Number(new Date()) / a_day) * a_day);\n        return message;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}