{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// map関数のコールバックが非同期処理の場合、すべての要素のmapコールバックが終了するまで待つようにする関数\nexport function asyncMap(array, operation) {\n  return Promise.all(array.map(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(item) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return operation(item);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()));\n} // 複数の非同期処理がすべて終わるまで待機し、終わったら返り値をリストで返す\n\nexport function asyncAll() {\n  return _asyncAll.apply(this, arguments);\n} // 0以上の小数であることの確認\n\nfunction _asyncAll() {\n  _asyncAll = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var _len,\n        asyncFunc,\n        _key,\n        result,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            for (_len = _args2.length, asyncFunc = new Array(_len), _key = 0; _key < _len; _key++) {\n              asyncFunc[_key] = _args2[_key];\n            }\n\n            _context2.next = 3;\n            return Promise.all(asyncFunc);\n\n          case 3:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _asyncAll.apply(this, arguments);\n}\n\nexport function checkUnsigned(num) {\n  var re = new RegExp(\"^([1-9]\\\\d*|0)(\\\\.\\\\d+)?$\", \"gi\");\n  return re.test(num);\n} // 符号なし整数であることの確認\n\nexport function checkUint(num) {\n  var re = new RegExp(\"^(\\\\d+)$\", \"gi\");\n  return re.test(num);\n} // 整数単位のタイムスタンプから時間表記に変更\n\nexport function unix2time(unixInt) {\n  var dt = new Date(unixInt * 1000);\n  return dt.toLocaleString();\n} // タイムスタンプわかりやすくを表示する\n\nexport function timestampLog(label) {\n  return console.log(\"\".concat(label, \": \"), Math.floor(new Date().getTime() / 1000));\n} // 代理人のトークンか判定して、そうであるならSymbol@IDという文字列を返す\n\nexport function isAgent(symbol, accountName, id) {\n  if (accountName === process.env.REACT_APP_EOS_ACCOUNT && Number(id) !== 0) {\n    return \"\".concat(symbol, \"@\").concat(id);\n  } else {\n    return accountName;\n  }\n}\nexport function prefixRedirect(url) {\n  var urlWithHttp = \"http://\" + url.replace(/^http(s)?:\\/\\/|\\/$/g, \"\");\n  return \"http://www.toycash.io/proxy.html?redirect=\" + urlWithHttp;\n}","map":{"version":3,"sources":["/var/www/html/pcs-proxy/src/scripts/Util.js"],"names":["asyncMap","array","operation","Promise","all","map","item","asyncAll","asyncFunc","result","checkUnsigned","num","re","RegExp","test","checkUint","unix2time","unixInt","dt","Date","toLocaleString","timestampLog","label","console","log","Math","floor","getTime","isAgent","symbol","accountName","id","process","env","REACT_APP_EOS_ACCOUNT","Number","prefixRedirect","url","urlWithHttp","replace"],"mappings":";;AAAA;AACA,OAAO,SAASA,QAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqC;AACxC,SAAOC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAU,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoBJ,SAAS,CAACI,IAAD,CAA7B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAAA;AAAA;AAAA;AAAA,MAAZ,CAAP;AACH,C,CAED;;AACA,gBAAsBC,QAAtB;AAAA;AAAA,C,CAKA;;;;;2BALO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uCAA4BC,SAA5B;AAA4BA,cAAAA,SAA5B;AAAA;;AAAA;AAAA,mBACkBL,OAAO,CAACC,GAAR,CAAYI,SAAZ,CADlB;;AAAA;AACGC,YAAAA,MADH;AAAA,8CAEIA,MAFJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,MAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAW,2BAAX,EAAwC,IAAxC,CAAX;AAEA,SAAOD,EAAE,CAACE,IAAH,CAAQH,GAAR,CAAP;AACH,C,CAED;;AACA,OAAO,SAASI,SAAT,CAAmBJ,GAAnB,EAAwB;AAC3B,MAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAW,UAAX,EAAuB,IAAvB,CAAX;AAEA,SAAOD,EAAE,CAACE,IAAH,CAAQH,GAAR,CAAP;AACH,C,CAED;;AACA,OAAO,SAASK,SAAT,CAAmBC,OAAnB,EAA4B;AAC/B,MAAIC,EAAE,GAAG,IAAIC,IAAJ,CAASF,OAAO,GAAG,IAAnB,CAAT;AACA,SAAOC,EAAE,CAACE,cAAH,EAAP;AACH,C,CAED;;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,SAAOC,OAAO,CAACC,GAAR,WAAeF,KAAf,SAA0BG,IAAI,CAACC,KAAL,CAAY,IAAIP,IAAJ,EAAD,CAAaQ,OAAb,KAAyB,IAApC,CAA1B,CAAP;AACH,C,CAED;;AACA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,WAAzB,EAAsCC,EAAtC,EAA0C;AAC7C,MAAKD,WAAW,KAAKE,OAAO,CAACC,GAAR,CAAYC,qBAA7B,IAAwDC,MAAM,CAACJ,EAAD,CAAN,KAAe,CAA3E,EAA+E;AAC3E,qBAAUF,MAAV,cAAoBE,EAApB;AACH,GAFD,MAEO;AACH,WAAOD,WAAP;AACH;AACJ;AAED,OAAO,SAASM,cAAT,CAAwBC,GAAxB,EAA6B;AAChC,MAAMC,WAAW,GAAG,YAAaD,GAAD,CAAME,OAAN,CAAc,qBAAd,EAAqC,EAArC,CAAhC;AACA,SAAO,+CAA+CD,WAAtD;AACH","sourcesContent":["// map関数のコールバックが非同期処理の場合、すべての要素のmapコールバックが終了するまで待つようにする関数\nexport function asyncMap (array, operation) {\n    return Promise.all(array.map(async item => await operation(item)))\n}\n\n// 複数の非同期処理がすべて終わるまで待機し、終わったら返り値をリストで返す\nexport async function asyncAll (...asyncFunc) {\n    const result = await Promise.all(asyncFunc)\n    return result;\n}\n\n// 0以上の小数であることの確認\nexport function checkUnsigned(num) {\n    const re = new RegExp(\"^([1-9]\\\\d*|0)(\\\\.\\\\d+)?$\", \"gi\");\n\n    return re.test(num);\n}\n\n// 符号なし整数であることの確認\nexport function checkUint(num) {\n    const re = new RegExp(\"^(\\\\d+)$\", \"gi\");\n\n    return re.test(num);\n}\n\n// 整数単位のタイムスタンプから時間表記に変更\nexport function unix2time(unixInt) {\n    let dt = new Date(unixInt * 1000);\n    return dt.toLocaleString();\n}\n\n// タイムスタンプわかりやすくを表示する\nexport function timestampLog(label) {\n    return console.log(`${label}: `, Math.floor((new Date()).getTime() / 1000));\n}\n\n// 代理人のトークンか判定して、そうであるならSymbol@IDという文字列を返す\nexport function isAgent(symbol, accountName, id) {\n    if ((accountName === process.env.REACT_APP_EOS_ACCOUNT) && (Number(id) !== 0)) {\n        return `${symbol}@${id}`\n    } else {\n        return accountName\n    }\n}\n\nexport function prefixRedirect(url) {\n    const urlWithHttp = \"http://\" + (url).replace(/^http(s)?:\\/\\/|\\/$/g, \"\");\n    return \"http://www.toycash.io/proxy.html?redirect=\" + urlWithHttp;\n}\n"]},"metadata":{},"sourceType":"module"}