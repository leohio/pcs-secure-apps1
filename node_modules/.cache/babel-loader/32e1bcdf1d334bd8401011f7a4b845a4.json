{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/var/www/html/pcs-proxy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// EosのHttpAPIに関する関数をまとめたもの\n// EOSテーブルから情報を取得する\nexport function getTable(_x) {\n  return _getTable.apply(this, arguments);\n} // トークン情報を取得する\n\nfunction _getTable() {\n  _getTable = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query) {\n    var url, req, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = process.env.REACT_APP_HOST_DOMAIN + \"/v1/chain/get_table_rows\";\n            req = {\n              method: \"POST\",\n              mode: \"cors\",\n              body: JSON.stringify(_objectSpread({\n                \"json\": true\n              }, query))\n            }; // EOSのAPIをたたく\n\n            _context.next = 4;\n            return fetch(url, req);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getTable.apply(this, arguments);\n}\n\nexport function getTokenInfo(_x2, _x3) {\n  return _getTokenInfo.apply(this, arguments);\n} // コンテンツ一覧を取得する\n\nfunction _getTokenInfo() {\n  _getTokenInfo = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(symbol, nftId) {\n    var code, query, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n            query = {\n              \"code\": code,\n              \"scope\": symbol,\n              \"table\": \"token\",\n              \"lower_bound\": nftId,\n              \"upper_bound\": nftId,\n              \"limit\": 1\n            };\n            _context2.next = 4;\n            return getTable(query);\n\n          case 4:\n            response = _context2.sent;\n\n            if (!(response.rows.length === 1)) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", response.rows[0]);\n\n          case 9:\n            console.error(\"対応するトークンが存在しません。\");\n            return _context2.abrupt(\"return\", null);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _getTokenInfo.apply(this, arguments);\n}\n\nexport function getContents(_x4) {\n  return _getContents.apply(this, arguments);\n} // 運営のトークンID一覧を取得する\n\nfunction _getContents() {\n  _getContents = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(symbol) {\n    var code, query, result, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n            query = {\n              \"code\": code,\n              \"scope\": symbol,\n              \"table\": \"contents\"\n            };\n            _context3.next = 4;\n            return getTable(query);\n\n          case 4:\n            result = _context3.sent;\n            // Web Apiを使ってTableの内容を取得\n            response = result.rows;\n            return _context3.abrupt(\"return\", response);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _getContents.apply(this, arguments);\n}\n\nexport function getManager(_x5) {\n  return _getManager.apply(this, arguments);\n}\n\nfunction _getManager() {\n  _getManager = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(symbol) {\n    var code, query, result, response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n            query = {\n              \"code\": code,\n              \"scope\": symbol,\n              \"table\": \"manager\"\n            };\n            _context4.next = 4;\n            return getTable(query);\n\n          case 4:\n            result = _context4.sent;\n            // Web Apiを使ってTableの内容を取得\n            response = result.rows;\n            return _context4.abrupt(\"return\", response);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _getManager.apply(this, arguments);\n}","map":{"version":3,"sources":["/var/www/html/pcs-proxy/src/scripts/EosHttpApi.js"],"names":["getTable","query","url","process","env","REACT_APP_HOST_DOMAIN","req","method","mode","body","JSON","stringify","fetch","response","json","result","getTokenInfo","symbol","nftId","code","REACT_APP_CONTRACT_ACCOUNT","rows","length","console","error","getContents","getManager"],"mappings":";;;AAAA;AAEA;AACA,gBAAsBA,QAAtB;AAAA;AAAA,C,CAcA;;;;;2BAdO,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,GADH,GACSC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAoC,0BAD7C;AAEGC,YAAAA,GAFH,GAES;AACRC,cAAAA,MAAM,EAAE,MADA;AAERC,cAAAA,IAAI,EAAE,MAFE;AAGRC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL;AAAiB,wBAAQ;AAAzB,iBAAkCV,KAAlC;AAHE,aAFT,EAQH;;AARG;AAAA,mBASkBW,KAAK,CAACV,GAAD,EAAMI,GAAN,CATvB;;AAAA;AASCO,YAAAA,QATD;AAAA;AAAA,mBAUgBA,QAAQ,CAACC,IAAT,EAVhB;;AAAA;AAUCC,YAAAA,MAVD;AAAA,6CAWIA,MAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeP,gBAAsBC,YAAtB;AAAA;AAAA,C,CAoBA;;;;;2BApBO,kBAA4BC,MAA5B,EAAoCC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,IADH,GACUhB,OAAO,CAACC,GAAR,CAAYgB,0BADtB;AAEGnB,YAAAA,KAFH,GAEW;AACV,sBAAQkB,IADE;AAEV,uBAASF,MAFC;AAGV,uBAAS,OAHC;AAIV,6BAAeC,KAJL;AAKV,6BAAeA,KALL;AAMV,uBAAS;AANC,aAFX;AAAA;AAAA,mBAUoBlB,QAAQ,CAACC,KAAD,CAV5B;;AAAA;AAUGY,YAAAA,QAVH;;AAAA,kBAYCA,QAAQ,CAACQ,IAAT,CAAcC,MAAd,KAAyB,CAZ1B;AAAA;AAAA;AAAA;;AAAA,8CAaQT,QAAQ,CAACQ,IAAT,CAAc,CAAd,CAbR;;AAAA;AAeCE,YAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd;AAfD,8CAgBQ,IAhBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBP,gBAAsBC,WAAtB;AAAA;AAAA,C,CAYA;;;;;2BAZO,kBAA2BR,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGE,YAAAA,IADH,GACUhB,OAAO,CAACC,GAAR,CAAYgB,0BADtB;AAEGnB,YAAAA,KAFH,GAEW;AACV,sBAAQkB,IADE;AAEV,uBAASF,MAFC;AAGV,uBAAS;AAHC,aAFX;AAAA;AAAA,mBAOgBjB,QAAQ,CAACC,KAAD,CAPxB;;AAAA;AAOCc,YAAAA,MAPD;AAOiC;AAChCF,YAAAA,QARD,GAQYE,MAAM,CAACM,IARnB;AAAA,8CASIR,QATJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,gBAAsBa,UAAtB;AAAA;AAAA;;;;;2BAAO,kBAA0BT,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGE,YAAAA,IADH,GACUhB,OAAO,CAACC,GAAR,CAAYgB,0BADtB;AAEGnB,YAAAA,KAFH,GAEW;AACV,sBAAQkB,IADE;AAEV,uBAASF,MAFC;AAGV,uBAAS;AAHC,aAFX;AAAA;AAAA,mBAOgBjB,QAAQ,CAACC,KAAD,CAPxB;;AAAA;AAOCc,YAAAA,MAPD;AAOiC;AAChCF,YAAAA,QARD,GAQYE,MAAM,CAACM,IARnB;AAAA,8CASIR,QATJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// EosのHttpAPIに関する関数をまとめたもの\n\n// EOSテーブルから情報を取得する\nexport async function getTable(query) {\n    const url = process.env.REACT_APP_HOST_DOMAIN + \"/v1/chain/get_table_rows\";\n    const req = {\n        method: \"POST\",\n        mode: \"cors\",\n        body: JSON.stringify({ \"json\": true, ...query })\n    };\n\n    // EOSのAPIをたたく\n    let response = await fetch(url, req);\n    let result = await response.json();\n    return result;\n}\n\n// トークン情報を取得する\nexport async function getTokenInfo(symbol, nftId) {\n    const code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n    const query = {\n        \"code\": code,\n        \"scope\": symbol,\n        \"table\": \"token\",\n        \"lower_bound\": nftId,\n        \"upper_bound\": nftId,\n        \"limit\": 1\n    };\n    const response = await getTable(query);\n    \n    if (response.rows.length === 1) {\n        return response.rows[0];  // e.g: {id: 0, subkey: \"EOS11...\", owner: \"toycashio123\", active: 1}\n    } else {\n        console.error(\"対応するトークンが存在しません。\");\n        return null;\n    }\n}\n\n// コンテンツ一覧を取得する\nexport async function getContents(symbol) {\n    const code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n    const query = {\n        \"code\": code,\n        \"scope\": symbol,\n        \"table\": \"contents\"\n    };\n    let result = await getTable(query); // Web Apiを使ってTableの内容を取得\n    let response = result.rows;\n    return response;\n}\n\n// 運営のトークンID一覧を取得する\nexport async function getManager(symbol) {\n    const code = process.env.REACT_APP_CONTRACT_ACCOUNT;\n    const query = {\n        \"code\": code,\n        \"scope\": symbol,\n        \"table\": \"manager\"\n    };\n    let result = await getTable(query); // Web Apiを使ってTableの内容を取得\n    let response = result.rows;\n    return response;\n}"]},"metadata":{},"sourceType":"module"}